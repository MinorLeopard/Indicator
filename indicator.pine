//@version=5
indicator("{Hardy}Bollinger Bands + MACD Angle + RSI with Risk factor", overlay=true)

// Bollinger Bands
length = input(20, "BB Length")
mult = input(1.7, "BB Multiplier")
basis = ta.sma(close, length)
dev = mult * ta.stdev(close, length)
upperBB = basis + dev
lowerBB = basis - dev
middle = basis

// MACD
macdShort = input(24, "MACD Short")
macdLong = input(52, "MACD Long")
macdSignal = input(18, "MACD Signal")

[macdLine, signalLine, _] = ta.macd(close, macdShort, macdLong, macdSignal)

// Calculate MACD angle
macdAngle = ta.change(macdLine) / ta.change(bar_index)

// Buy signal condition
buyCondition = ta.crossover(close, lowerBB) and macdAngle < 5
plotshape(buyCondition, title="Buy Signal", color=color.green, style=shape.labelup, location=location.belowbar, size=size.small, text="Buy", textcolor=color.white)
alertcondition(buyCondition, title="Buy Signal", message="Buy Signal")

// Short signal condition
shortCondition = ta.crossunder(close, upperBB) and macdAngle > -5
plotshape(shortCondition, title="Short Signal", color=color.purple, style=shape.labeldown, size=size.small, text="Short", textcolor=color.white)
alertcondition(shortCondition, title="Sell Signal", message="Sell Signal")

// Stop loss variables
var bool stopLossBuy = false
var bool stopLossSell = false
var float stopLossLevelBuy = na
var float stopLossLevelSell = na

// Calculate stop loss levels and trigger stop loss signals

// Plot Bollinger Bands with fill
p1 = plot(upperBB, color=color.blue, title="Upper Bollinger Band")
p2 = plot(lowerBB, color=color.blue, title="Lower Bollinger Band")
plot(middle, title="Middle Band", color=color.red)
fill(p1, p2, color=color.new(color.blue, 90))

// Check previous three candles' open and close range
prevOpenCloseInRange = (open[1] > middle[1] and close[1] < middle[1] and open[2] < middle[2] and close[2] > middle[2] and open[3] > middle[3] and close[3] < middle[3]) or
                       (open[1] < middle[1] and close[1] > middle[1] and open[2] > middle[2] and close[2] < middle[2] and open[3] < middle[3] and close[3] > middle[3])

// Check current candle's favorability
currentCandleFavorsPrevious = (open > middle[1] and close < middle[1]) or (open < middle[1] and close > middle[1])

float vwapValue = na
float vwapLowerBand= na
float vwapUpperBand= na

// Calculate VWAP with anchor period session and source HLC3
[_vwap, _stdevUpper, _] = ta.vwap(hlc3, timeframe.change("D"), 1)
vwapValue := _vwap
stdevAbs = _stdevUpper - _vwap
vwapUpperBand := _vwap + stdevAbs * 1.0
vwapLowerBand := _vwap - stdevAbs * 1.0

//plot(vwapUpperBand,title = "Upper VWAP")
//plot(vwapLowerBand,title = "Lower VWAP")

var bool showRiskSignalBuy = false
var bool showRiskSignalSell = false

if shortCondition
    showRiskSignalSell := true
    showRiskSignalBuy := false

if buyCondition
    showRiskSignalBuy := true
    showRiskSignalSell := false

if showRiskSignalSell and not shortCondition and close > vwapUpperBand and open < vwapUpperBand
    label.new(bar_index, na, "Risk", color=color.white, textcolor=color.black, style=label.style_text_outline, yloc=yloc.abovebar)
    showRiskSignalSell := false
    alert("Chance of Reversal in Short")

if showRiskSignalBuy and not buyCondition and close < vwapLowerBand and open > vwapLowerBand
    label.new(bar_index, na, "Risk", color=color.white, textcolor=color.black, style=label.style_text_outline, yloc=yloc.belowbar)
    alert("Chance of Reversal in Buy")
    showRiskSignalBuy := false

// Plot MACD Angle
plot(macdAngle, title="MACD Angle")


//Integration of RSI + MACD


len = input(title="RSI Period", defval=7)
src = input(title="RSI Source", defval=close)
lbR = input(title="Pivot Lookback Right", defval=5)
lbL = input(title="Pivot Lookback Left", defval=3)

rangeUpper = input(title="Max of Lookback Range", defval=60)
rangeLower = input(title="Min of Lookback Range", defval=5)
plotBull = input(title="Plot Bullish", defval=true)
plotHiddenBull = input(title="Plot Hidden Bullish", defval=true)
plotBear = input(title="Plot Bearish", defval=true)
plotHiddenBear = input(title="Plot Hidden Bearish", defval=false)

bearColor = color.purple
bullColor = color.green
hiddenBullColor = color.new(color.green, 80)
hiddenBearColor = color.new(color.red, 80)
textColor = color.white
noneColor = color.new(color.white, 100)

osc = ta.rsi(src, len)

plot(osc, title="RSI", linewidth=2, color=color.new(#8D1699, 100))

hline(50, title="Middle Line", linestyle=hline.style_dotted)
obLevel = hline(60, title="Overbought", linestyle=hline.style_dotted)
osLevel = hline(40, title="Oversold", linestyle=hline.style_dotted)
fill(obLevel, osLevel, title="Background", color=color.new(#9915FF, 90))

plFound = na(ta.pivotlow(osc, lbL, lbR)) ? false : true
phFound = na(ta.pivothigh(osc, lbL, lbR)) ? false : true

_inRange(cond) =>
    bars = ta.barssince(cond == true)
    rangeLower <= bars and bars <= rangeUpper

//------------------------------------------------------------------------------
// Regular Bullish

// Osc: Higher Low
oscHL = osc[lbR] > ta.valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])

// Price: Lower Low
priceLL = low[lbR] < ta.valuewhen(plFound, low[lbR], 1)

bullCond = plotBull and priceLL and oscHL and plFound

plotshape(bullCond ? osc[lbR] : na, offset=-lbR, title="Regular Bullish", text="Buy", style=shape.labelup, location=location.belowbar, size=size.small,color=bullColor, textcolor=textColor)

//------------------------------------------------------------------------------
// Hidden Bullish

// Osc: Lower Low
oscLL = osc[lbR] < ta.valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])

// Price: Higher Low
priceHL = low[lbR] > ta.valuewhen(plFound, low[lbR], 1)

hiddenBullCond = plotHiddenBull and priceHL and oscLL and plFound

plotshape(hiddenBullCond ? osc[lbR] : na, offset=-lbR, title="Hidden Bullish", text="Buy", style=shape.labelup, size=size.small, location=location.belowbar, color=bullColor, textcolor=textColor)

longCondition = bullCond or hiddenBullCond

//------------------------------------------------------------------------------
// Regular Bearish

// Osc: Lower High
oscLH = osc[lbR] < ta.valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])

// Price: Higher High
priceHH = high[lbR] > ta.valuewhen(phFound, high[lbR], 1)

bearCond = plotBear and priceHH and oscLH and phFound

plotshape(bearCond ? osc[lbR] : na, offset=-lbR, title="Regular Bearish", text="Short", style=shape.labeldown, location=location.abovebar, size=size.small, color=bearColor, textcolor=textColor)

//------------------------------------------------------------------------------
// Hidden Bearish

// Osc: Higher High
oscHH = osc[lbR] > ta.valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])

// Price: Lower High
priceLH = high[lbR] < ta.valuewhen(phFound, high[lbR], 1)

hiddenBearCond = plotHiddenBear and priceLH and oscHH and phFound

plotshape(hiddenBearCond ? osc[lbR] : na, offset=-lbR, title="Hidden Bearish", text="Short", style=shape.labeldown,  size=size.small,location=location.abovebar, color=bearColor, textcolor=textColor)

//------------------------------------------------------------------------------


